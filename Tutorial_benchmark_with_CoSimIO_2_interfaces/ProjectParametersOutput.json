{
    "output_processes": {
        "vtk_output": [
            {
                "Parameters": {
                    "condition_data_value_variables": [],
                    "condition_flags": [],
                    "custom_name_postfix": "",
                    "custom_name_prefix": "",
                    "element_data_value_variables": [],
                    "element_flags": [],
                    "file_format": "ascii",
                    "gauss_point_variables_extrapolated_to_nodes": [],
                    "gauss_point_variables_in_elements": [],
                    "model_part_name": "Structure",
                    "nodal_data_value_variables": [],
                    "nodal_flags": [],
                    "nodal_solution_step_data_variables": [
                        "DISPLACEMENT",
                        "POINT_LOAD"
                    ],
                    "output_control_type": "step",
                    "output_interval": 1,
                    "output_path": "vtk_output",
                    "output_precision": 7,
                    "output_sub_model_parts": false,
                    "save_output_files_in_folder": true,
                    "write_deformed_configuration": false,
                    "write_ids": false
                },
                "help": "This process writes postprocessing files for Paraview",
                "kratos_module": "KratosMultiphysics",
                "process_name": "VtkOutputProcess",
                "python_module": "vtk_output_process"
            }
        ]
    },
    "problem_data": {
        "echo_level": 4,
        "end_time": 50.0,
        "parallel_type": "OpenMP",
        "problem_name": "Wall_Structure",
        "start_time": 0.0
    },
    "processes": {
        "auxiliar_process_list": [
            {
                "Parameters": {
                    "entity_type": "node",
                    "help": "This process writes results from a geometrical position (point) in the model to a file. It first searches the entity containing the requested output location and then interpolates the requested variable(s). The output can be requested for elements, conditions and nodes. For nodes no geometrical interpolation is performed, the exact coordinates have to be specified. This process works in MPI as well as with restarts. It can serve as a basis for other processes (e.g. MultiplePointsOutputProcess). Furthermore it can be used for testing in MPI where the node numbers can change",
                    "historical_value": true,
                    "interval": [
                        0.0,
                        1e+30
                    ],
                    "model_part_name": "Structure",
                    "output_file_settings": {
                        "file_name": "fsi_wall_csm_results_disp.dat",
                        "output_path": "fsi_wall"
                    },
                    "output_variables": [
                        "DISPLACEMENT"
                    ],
                    "position": [
                        9.5,
                        6.03,
                        0.0
                    ],
                    "print_format": "",
                    "search_configuration": "initial",
                    "search_tolerance": 1e-06
                },
                "help": "",
                "kratos_module": "KratosMultiphysics",
                "process_name": "PointOutputProcess",
                "python_module": "point_output_process"
            },
            {
                "Parameters": {
                    "comparison_type": "dat_file_variables_time_history",
                    "dimension": 3,
                    "help": "This process checks that two files are the same. This can be used in order to create tests, where a given solution is expected",
                    "output_file_name": "fsi_wall/fsi_wall_csm_results_disp.dat",
                    "reference_file_name": "fsi_wall/fsi_wall_csm_results_disp_ref.dat",
                    "relative_tolerance": 1e-09,
                    "remove_output_file": true,
                    "tolerance": 0.001
                },
                "help": "",
                "kratos_module": "KratosMultiphysics",
                "process_name": "CompareTwoFilesCheckProcess",
                "python_module": "compare_two_files_check_process"
            }
        ],
        "constraints_process_list": [
            {
                "Parameters": {
                    "constrained": [
                        true,
                        true,
                        true
                    ],
                    "help": "This process assigns a given value (vector) to the nodes belonging a certain submodelpart",
                    "interval": [
                        0.0,
                        "End"
                    ],
                    "local_axes": {},
                    "mesh_id": 0,
                    "model_part_name": "Structure.DISPLACEMENT_Dirichlet",
                    "value": [
                        0.0,
                        0.0,
                        0.0
                    ],
                    "variable_name": "DISPLACEMENT"
                },
                "kratos_module": "KratosMultiphysics",
                "python_module": "assign_vector_variable_process"
            }
        ],
        "json_output": [
            {
                "Parameters": {
                    "check_for_flag": "",
                    "gauss_points_output_variables": [],
                    "help": "This process generates a json file containing the solution of a list of variables from a given submodelpart",
                    "historical_value": true,
                    "model_part_name": "Structure",
                    "output_file_name": "fsi_wall/fsi_wall_csm_results_disp.json",
                    "output_variables": [
                        "DISPLACEMENT_Y"
                    ],
                    "resultant_solution": false,
                    "sub_model_part_name": "",
                    "time_frequency": 0.02,
                    "use_node_coordinates": false
                },
                "help": "This process writes postprocessing files for testing purpose",
                "kratos_module": "KratosMultiphysics",
                "process_name": "JsonOutputProcess",
                "python_module": "json_output_process"
            }
        ],
        "loads_process_list": []
    },
    "solver_settings": {
        "analysis_type": "non_linear",
        "auxiliary_dofs_list": [],
        "auxiliary_reaction_list": [],
        "auxiliary_variables_list": [],
        "buffer_size": 3,
        "builder_and_solver_settings": {
            "advanced_settings": {
                "block_builder": true,
                "diagonal_values_for_dirichlet_dofs": "use_max_diagonal",
                "echo_level": 1,
                "name": "block_builder_and_solver",
                "silent_warnings": false
            },
            "use_block_builder": true,
            "use_lagrange_BS": false
        },
        "clear_storage": false,
        "compute_reactions": true,
        "convergence_criterion": "residual_criterion",
        "damp_factor_m": -0.3,
        "displacement_absolute_tolerance": 1e-07,
        "displacement_control": false,
        "displacement_relative_tolerance": 1e-07,
        "domain_size": 2,
        "echo_level": 0,
        "line_search": false,
        "linear_solver_settings": {
            "solver_type": "LinearSolversApplication.sparse_qr"
        },
        "material_import_settings": {
            "materials_filename": "StructuralMaterials.json"
        },
        "max_iteration": 20,
        "model_import_settings": {
            "ignore_variables_not_in_solution_step_data": false,
            "input_filename": "Wall_Structure",
            "input_type": "mdpa",
            "reorder": false,
            "reorder_consecutive": false,
            "skip_timer": true
        },
        "model_part_name": "Structure",
        "move_mesh_flag": true,
        "multi_point_constraints_used": true,
        "newmark_beta": 0.25,
        "pressure_dofs": false,
        "rayleigh_alpha": 0.0,
        "rayleigh_beta": 0.0,
        "reform_dofs_at_each_step": false,
        "residual_absolute_tolerance": 1e-07,
        "residual_relative_tolerance": 1e-07,
        "rotation_dofs": false,
        "scheme_type": "bossak",
        "solver_type": "Dynamic",
        "time_integration_method": "implicit",
        "time_stepping": {
            "time_step": 0.01
        },
        "use_old_stiffness_in_first_iteration": false,
        "volumetric_strain_dofs": false
    }
}