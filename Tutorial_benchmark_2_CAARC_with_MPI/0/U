/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.0.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    location    "0";
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

//internalField   uniform (11.11 0 0);
internalField   uniform (0 0 0);

boundaryField
{
    inlet
    {
        //type            fixedValue;
        //value           uniform (11.11 0 0);

        // Time-varying parabolic inlet profile
        type               groovyBC;
        valueExpression   "time() < 20  ?   ((95 * time()/4) * pow( (pos().z) / 180 , 0.25))*normal() : (95 * pow( (pos().z) / 180 , 0.25))*normal()";
	    value              uniform (0 0 0);

        //type            groovyBC;
        //variables "yp=pts().y;minY=min(yp);maxY=max(yp);para=-1.5*(maxY-pos().y)*(pos().y-minY)/(0.25*pow(maxY-minY,2))*normal();";
        //valueExpression "time()<20 ? 0.5*(1-cos(0.5*pi*time()))*2*para : 2*para";
        //value           uniform (2 0 0);

        //type            timeVaryingMappedFixedValue;
        //type          timeVaryingMappedHDF5FixedValue
        //setAverage      0;
	    //offset          (0 0 0);
        //perturb         0;
        //hdf5FileName    windgen.h5;
        //hdf5PointsDatasetName    points;
        //hdf5SampleTimesDatasetName    time;
        //hdf5FieldValuesDatasetName    velocity;
    }

    upperWall
    {
        type            fixedValue;
        //value           uniform (11.11 0 0);
        value           uniform (134.35 0 0);

    }

    outlet
    {
        type            zeroGradient;
    }

    lowerWall
    {
        type            fixedValue;
        value           uniform (0 0 0);
    }

    tubesfs
    {
        type            movingWallVelocity;
        value           uniform (0 0 0);
    }

    frontAndBack
    {
        type            symmetry;
    }
}


// ************************************************************************* //
